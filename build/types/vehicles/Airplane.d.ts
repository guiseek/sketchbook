import { VehicleAirplaneAction } from '../types/vehicle-action';
import { IControllable } from '../interfaces/icontrollable';
import { IWorldEntity } from '../interfaces/iworld-entity';
import { EntityType } from '../enums/entity-type';
import { KeyBinding } from '../core/key-binding';
import { Vehicle } from './vehicle';
import { Object3D } from 'three';
import * as CANNON from 'cannon';
export declare class Airplane extends Vehicle implements IControllable, IWorldEntity {
    actions: Record<VehicleAirplaneAction, KeyBinding>;
    entityType: EntityType;
    rotor: Object3D;
    leftAileron: Object3D;
    rightAileron: Object3D;
    elevators: Object3D[];
    rudder: Object3D;
    private steeringSimulator;
    private aileronSimulator;
    private elevatorSimulator;
    private rudderSimulator;
    private enginePower;
    private lastDrag;
    constructor(gltf: any);
    noDirectionPressed(): boolean;
    update(timeStep: number): void;
    physicsPreStep(body: CANNON.Body, plane: Airplane): void;
    onInputChange(): void;
    readAirplaneData(gltf: any): void;
    inputReceiverInit(): void;
}
