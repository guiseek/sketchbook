import { IControllable } from '../interfaces/icontrollable';
import { IWorldEntity } from '../interfaces/iworld-entity';
import { VehicleAction } from '../types/vehicle-action';
import { Character } from '../characters/character';
import { KeyBinding } from '../core/key-binding';
import { EntityType } from '../enums/entity-type';
import { VehicleSeat } from './vehicle-seat';
import { World } from '../world/World';
import * as CANNON from 'cannon';
import { Wheel } from './wheel';
import { Object3D, AxesHelper, Material } from 'three';
export declare abstract class Vehicle extends Object3D implements IWorldEntity, IControllable {
    updateOrder: number;
    abstract entityType: EntityType;
    controllingCharacter: Character;
    abstract actions: Record<VehicleAction, KeyBinding>;
    rayCastVehicle: CANNON.RaycastVehicle;
    seats: VehicleSeat[];
    wheels: Wheel[];
    drive: string;
    camera: any;
    world: World;
    help: AxesHelper;
    collision: CANNON.Body;
    materials: Material[];
    spawnPoint: Object3D;
    private modelContainer;
    private firstPerson;
    constructor(gltf: any, handlingSetup?: any);
    noDirectionPressed(): boolean;
    update(timeStep: number): void;
    forceCharacterOut(): void;
    onInputChange(): void;
    resetControls(): void;
    allowSleep(value: boolean): void;
    handleKeyboardEvent(event: KeyboardEvent, code: string, pressed: boolean): void;
    setFirstPersonView(value: boolean): void;
    toggleFirstPersonView(): void;
    triggerAction(actionName: string, value: boolean): void;
    handleMouseButton(event: MouseEvent, code: string, pressed: boolean): void;
    handleMouseMove(event: MouseEvent, deltaX: number, deltaY: number): void;
    handleMouseWheel(event: WheelEvent, value: number): void;
    inputReceiverInit(): void;
    inputReceiverUpdate(timeStep: number): void;
    setPosition(x: number, y: number, z: number): void;
    setSteeringValue(val: number): void;
    applyEngineForce(force: number): void;
    setBrake(brakeForce: number, driveFilter?: string): void;
    addToWorld(world: World): void;
    removeFromWorld(world: World): void;
    readVehicleData(gltf: any): void;
    private connectSeats;
}
